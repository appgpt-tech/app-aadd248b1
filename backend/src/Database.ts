//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { skeletonsEntity } from './db/skeletons.entity';
import { dragonsEntity } from './db/dragons.entity';
import { cyclopsEntity } from './db/cyclops.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      skeletonsEntity,
      dragonsEntity,
      cyclopsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      skeletons: [
        { bowAndArrow: 'bowAndArrow 1', id: 50 },
        { bowAndArrow: 'bowAndArrow 2', id: 26 },
        { bowAndArrow: 'bowAndArrow 3', id: 82 },
        { bowAndArrow: 'bowAndArrow 4', id: 37 },
        { bowAndArrow: 'bowAndArrow 5', id: 81 },
      ],
      dragons: [
        { shootFireAndSlash: 'shootFireAndSlash 1', id: 56 },
        { shootFireAndSlash: 'shootFireAndSlash 2', id: 19 },
        { shootFireAndSlash: 'shootFireAndSlash 3', id: 91 },
        { shootFireAndSlash: 'shootFireAndSlash 4', id: 81 },
        { shootFireAndSlash: 'shootFireAndSlash 5', id: 32 },
      ],
      cyclops: [
        { bigHammer: 'bigHammer 1', id: 70 },
        { bigHammer: 'bigHammer 2', id: 84 },
        { bigHammer: 'bigHammer 3', id: 42 },
        { bigHammer: 'bigHammer 4', id: 56 },
        { bigHammer: 'bigHammer 5', id: 65 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('skeletonsEntity', data.skeletons);
      await this.SeedResource('dragonsEntity', data.dragons);
      await this.SeedResource('cyclopsEntity', data.cyclops);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
